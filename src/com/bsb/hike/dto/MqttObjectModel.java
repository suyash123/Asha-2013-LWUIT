package com.bsb.hike.dto;

import com.bsb.hike.io.mqtt.MqttJsonWrapper;
import com.bsb.hike.util.Log;
import org.json.me.JSONException;
import org.json.me.JSONObject;

/**
 * dto for MqttObject 
 * @author Ankit Yadav
 */
public class MqttObjectModel implements DataModel {
    private static final String TAG = "MqttObjectModel";
    public static class MqttType {

        private final String name;
        private final int mId;
        private static int sGenerator;
        //
        public static final MqttType MESSAGE = new MqttType("m");
        public static final MqttType MESSAGE_READ = new MqttType("mr");
        //
        public static final MqttType SMS_CREDIT = new MqttType("sc");
        public static final MqttType DELIVERY_REPORT = new MqttType("dr");
        //
        public static final MqttType USER_JOINED = new MqttType("uj");
        public static final MqttType USER_LEFT = new MqttType("ul");
        //
        public static final MqttType BIS = new MqttType("bis");
        //
        public static final MqttType START_TYPING = new MqttType("st");
        public static final MqttType END_TYPING = new MqttType("et");
        //
        public static final MqttType INVITE = new MqttType("i");
        public static final MqttType INVITEE_JOINED = new MqttType("ij");
        public static final MqttType USER_OPTIN = new MqttType("uo");
        //
        public static final MqttType ICON = new MqttType("ic");
        public static final MqttType INVITE_INFO = new MqttType("ii");
        //
        public static final MqttType BLOCK_USER = new MqttType("b");
        public static final MqttType UNBLOCK_USER = new MqttType("ub");
        //
        public static final MqttType GROUP_CHAT_JOIN = new MqttType("gcj");
        public static final MqttType GROUP_CHAT_LEAVE = new MqttType("gcl");
        public static final MqttType GROUP_CHAT_END = new MqttType("gce");
        public static final MqttType GROUP_CHAT_NAME = new MqttType("gcn");
        public static final MqttType ANALYTICS_EVENT = new MqttType("le");
        public static final MqttType UPDATE_AVAILABLE = new MqttType("ua");
        public static final MqttType ACCOUNT_INFO = new MqttType("ai");
        public static final MqttType REQUEST_ACCOUNT_INFO = new MqttType("rai");
        public static final MqttType ACCOUNT = new MqttType("ac");
        public static final MqttType ACTION = new MqttType("action");
        //
        public static final MqttType UNKNOWN = new MqttType("unknown");
        private MqttType(String name) {
            this.name = name;
            mId = ++sGenerator;
        }

        public String toString() {
            return name;
        }

        public boolean equals(String type) {
            return name.equals(type);
        }

        public int id() {
            return mId;
        }
    }

    public static class MessageType {

        private final String name;
        public static final MessageType SMS = new MessageType("sm");
        public static final MessageType HIKE = new MessageType("hm");
        public static final MessageType SYSTEM = new MessageType("system");
        

        private MessageType(String name) {
            this.name = name;
        }

        public String toString() {
            return name;
        }
    }

    public static class MessageDirection {

        private final String name;
        public static final MessageDirection OUT = new MessageDirection("to");
        public static final MessageDirection IN = new MessageDirection("f");
        public static final MessageDirection REPORT = new MessageDirection("r");

        private MessageDirection(String name) {
            this.name = name;
        }

        public String toString() {
            return name;
        }
    }
    public MqttType type;
    public MqttType subType;
    public Object data;
    public String toMsisdn;
    public String fromMsisdn;

    /**
     * default constructor
     *
     * @param type type of mqtt message
     * @param data content of message, can be {@link <code>null</code>} <br/>
     * below are few allowed data types for particular {@link MqttType} <ul>
     * <li>message : {@link MqttMessage}</li> <li>invite :
     * {@link MqttInvite}</li> <li>sms credit : {@link Integer} or
     * {@link String}</li> <li>delivery reports : message id as
     * {@link String}</li> <li>user joined/left : msisdn number as
     * {@link String}</li> <li>invitee joined : msisdn number as
     * {@link String}</li> <li>avatar : <base64 version of the icon></li> </ul>
     * @param direction direction of message i.e. send/receive,
     * outgoing/incoming message will have values {@link MessageType.OUT} &
     *            {@link MessageType.IN}, if from value is omitted it is generated by
     * system
     * @exception if type is null it throws {@link IllegalArgumentException}
     */
    public MqttObjectModel(MqttType type, Object data, String to, String from) {
        if (type == null) {
            throw new IllegalArgumentException();
        }
        this.type = type;
        this.data = data;
        this.toMsisdn = to;
        this.fromMsisdn = from;
    }
    
    public MqttObjectModel(MqttType type, Object data, String to, String from, MqttType subType ) {
        this(type, data, to, from);
        this.subType = subType;
    }

    /**
     * 
     * @return whether the mqttobject belongs to group chat or 1-to-1
     */
    public boolean isGroupChat() {
        return toMsisdn != null && fromMsisdn != null ? true : false;
    }

    /**
     * 
     * @return message direction, IN, OUT or REPORT
     */
    public MessageDirection getMessageDirection() {
        if (isGroupChat()) {
            if (fromMsisdn.equals(AppState.getUserDetails().getMsisdn())) {
                return MessageDirection.OUT;
            } else {
                return MessageDirection.IN;
            }
        } else {
            if (type == MqttType.MESSAGE_READ) {
                if (fromMsisdn == null) {
                    return MessageDirection.REPORT;
                } else {
                    return MessageDirection.IN;
                }
            } else {
                if (toMsisdn == null && fromMsisdn == null) {
                    return MessageDirection.IN;
                } else if (toMsisdn != null) {
                    return MessageDirection.OUT;
                } else {
                    return MessageDirection.IN;
                }
            }
        }
    }

    public String toString() {
        return "MqttObjectModel{type:" + type + ", data:" + data + ", direction:" + getMessageDirection() + ", to:" + toMsisdn + ", from:" + fromMsisdn + "}";
    }

    public String toJsonString() {
        String jsonString = null;
        try {
            JSONObject jsonObj = MqttJsonWrapper.toJSON(this);
            if (jsonObj != null) {
                jsonString = jsonObj.toString();
            }
        } catch (JSONException ex) {
                    
            Log.v(TAG, "unable to convert mqtt object json to string, null would be returned instead");
        }
        return jsonString;
    }
}